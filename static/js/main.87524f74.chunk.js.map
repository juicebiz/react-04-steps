{"version":3,"sources":["Components/Listing/Listing.js","App.js","reportWebVitals.js","index.js"],"names":["Listing","useState","records","setRecords","date","distance","form","setForm","handleChange","evt","target","name","value","prevForm","Fragment","onSubmit","preventDefault","newRecords","findRecord","find","record","undefined","id","nanoid","parseInt","sort","a","b","prevRecords","onChange","type","required","map","onClick","filter","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAgFeA,MA7Ef,WAEI,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,CAAEG,KAAM,GAAIC,SAAU,KAAvD,mBAAOC,EAAP,KAAaC,EAAb,KA6BMC,EAAe,SAAAC,GACjB,MAAsBA,EAAIC,OAAnBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbL,GAAQ,SAAAM,GAAQ,kCAASA,GAAT,kBAAoBF,EAAOC,QAW/C,OACI,eAAC,IAAME,SAAP,WACI,uBAAMC,SA1CO,SAAAN,GACjBA,EAAIO,iBAGJ,IACIC,EADEC,EAAahB,EAAQiB,MAAK,SAAAC,GAAM,OAAIA,EAAOhB,OAASE,EAAKF,QAG/D,QAAkBiB,IAAfH,EAA0B,CACzB,IAAME,EAAS,CACXE,GAAIC,cACJnB,KAAME,EAAKF,KACXC,SAAUmB,SAASlB,EAAKD,WAE5BY,EAAU,sBAAOf,GAAP,CAAgBkB,SAE1BF,EAAU,UAAgBM,SAASlB,EAAKD,UACxCY,EAAU,YAAOf,GAGrBe,EAAWQ,MAAK,SAASC,EAAGC,GACxB,OAAOD,EAAC,KAAWC,EAAC,QAGxBxB,GAAW,SAAAyB,GAAW,OAAIX,MAmBtB,UACI,uGACA,uBAAON,KAAK,OAAOC,MAAON,EAAKF,KAAMyB,SAAUrB,EAAcsB,KAAK,OAAOC,UAAQ,IAFrF,iEAII,uBAAOpB,KAAK,WAAWC,MAAON,EAAKD,SAAUwB,SAAUrB,EAAcsB,KAAK,SAASC,UAAQ,IAC3F,wBAAQD,KAAK,SAAb,mBAEJ,wBAAO,aAAM,gBAAb,UACI,gCACI,+BACA,mGACA,gGACA,uBACA,4BAGJ,gCACK5B,EAAQ8B,KAAI,SAAAZ,GAAM,OACf,+BACI,6BAAKA,EAAOhB,OACZ,6BAAKgB,EAAOf,WACZ,6BAAI,wBAAQ4B,QAAS,kBA3B1BX,EA2B2CF,EAAOE,QA1BjEnB,GAAW,SAAAyB,GAAW,OAAIA,EAAYM,QAAO,SAAAd,GAAM,OAAIA,EAAOE,KAAOA,QADtD,IAAAA,GA2BS,8FACJ,6BAAI,wBAAQW,QAAS,kBAhCxBX,EAgC2CF,EAAOE,QA/BnEnB,GAAW,SAAAyB,GAAW,OAAIA,EAAYM,QAAO,SAAAd,GAAM,OAAIA,EAAOE,KAAOA,QADpD,IAAAA,GAgCO,4DAJCF,EAAOE,gB,MC/CzBa,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCHOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.87524f74.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { nanoid } from 'nanoid'\r\n\r\nfunction Listing() {\r\n\r\n    const [records, setRecords] = useState([])\r\n    const [form, setForm] = useState({ date: '', distance: '' })\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault()\r\n        //const record = new RecordModel(nanoid(), form.date, form.distance)\r\n\r\n        const findRecord = records.find(record => record.date === form.date)\r\n        let newRecords\r\n\r\n        if(findRecord === undefined) {\r\n            const record = {\r\n                id: nanoid(),\r\n                date: form.date,\r\n                distance: parseInt(form.distance)\r\n            }\r\n            newRecords = [...records, record]\r\n        } else {\r\n            findRecord['distance'] += parseInt(form.distance)\r\n            newRecords = [...records]\r\n        }\r\n\r\n        newRecords.sort(function(a, b) {\r\n            return a['date'] - b['date'];\r\n        });\r\n\r\n        setRecords(prevRecords => newRecords)\r\n    }\r\n\r\n\r\n    const handleChange = evt => {\r\n        const {name, value} = evt.target\r\n        setForm(prevForm => ({...prevForm, [name]: value}))\r\n    }\r\n\r\n    const handleRemove = id => {\r\n        setRecords(prevRecords => prevRecords.filter(record => record.id !== id))\r\n    }\r\n\r\n    const handleEdit = id => {\r\n        setRecords(prevRecords => prevRecords.filter(record => record.id !== id))\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>Дата (ДД.ММ.ГГ.)</label>\r\n                <input name=\"date\" value={form.date} onChange={handleChange} type=\"date\" required />\r\n                Пройдено, км\r\n                <input name=\"distance\" value={form.distance} onChange={handleChange} type=\"number\" required />\r\n                <button type=\"submit\">Ok</button>\r\n            </form>\r\n            <table сlass=\"Listing-table\">\r\n                <thead>\r\n                    <tr>\r\n                    <th>Дата (ДД.ММ.ГГ)</th>\r\n                    <th>Пройдено, км</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>    \r\n                    {records.map(record => \r\n                        <tr key={record.id}>\r\n                            <td>{record.date}</td>\r\n                            <td>{record.distance}</td>\r\n                            <td><button onClick={() => handleEdit(record.id)}>Редактировать</button></td>\r\n                            <td><button onClick={() => handleRemove(record.id)}>Удалить</button></td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n        </React.Fragment>    \r\n    )\r\n}\r\n\r\nexport default Listing\r\n","import Listing from './Components/Listing/Listing'\nimport './App.css'\n\n/*class RecordModel{\n  constructor(id, date, distance) {\n    this.id = id\n    this.date = date\n    this.distance = distance\n  }\n}*/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">        \n        <Listing />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}